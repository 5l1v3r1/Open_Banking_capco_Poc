/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Renderer2, Inject } from '@angular/core';
import { wrapProperty, defineHiddenProp, FORMLY_VALIDATORS } from '../utils';
import { DOCUMENT } from '@angular/common';
var FormlyAttributes = /** @class */ (function () {
    function FormlyAttributes(renderer, elementRef, _document) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.uiAttributesCache = {};
        this.uiAttributes = tslib_1.__spread(FORMLY_VALIDATORS, [
            'tabindex',
            'placeholder',
            'readonly',
            'disabled',
        ]);
        this.document = _document;
    }
    Object.defineProperty(FormlyAttributes.prototype, "to", {
        get: /**
         * @return {?}
         */
        function () { return this.field.templateOptions || {}; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyAttributes.prototype, "fieldAttrElements", {
        get: /**
         * @private
         * @return {?}
         */
        function () { return (this.field && this.field['_attrElements']) || []; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    FormlyAttributes.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.field) {
            this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);
            if (this.to && this.to.attributes) {
                wrapProperty(this.to, 'attributes', (/**
                 * @param {?} newVal
                 * @param {?} oldValue
                 * @return {?}
                 */
                function (newVal, oldValue) {
                    if (oldValue) {
                        Object.keys(oldValue).forEach((/**
                         * @param {?} attr
                         * @return {?}
                         */
                        function (attr) { return _this.renderer.removeAttribute(_this.elementRef.nativeElement, attr); }));
                    }
                    if (newVal) {
                        Object.keys(newVal).forEach((/**
                         * @param {?} attr
                         * @return {?}
                         */
                        function (attr) { return _this.setAttribute(attr, newVal[attr]); }));
                    }
                }));
            }
            this.attachAttrElement();
            if (this.fieldAttrElements.length === 1) {
                wrapProperty(this.field, 'focus', (/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    /** @type {?} */
                    var element = _this.fieldAttrElements ? _this.fieldAttrElements[0] : null;
                    if (!element) {
                        return;
                    }
                    _this.focusElement(element, value);
                }));
            }
        }
    };
    /**
     * We need to re-evaluate all the attributes on every change detection cycle, because
     * by using a HostBinding we run into certain edge cases. This means that whatever logic
     * is in here has to be super lean or we risk seriously damaging or destroying the performance.
     *
     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317
     * Material issue: https://github.com/angular/material2/issues/14024
     */
    /**
     * We need to re-evaluate all the attributes on every change detection cycle, because
     * by using a HostBinding we run into certain edge cases. This means that whatever logic
     * is in here has to be super lean or we risk seriously damaging or destroying the performance.
     *
     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317
     * Material issue: https://github.com/angular/material2/issues/14024
     * @return {?}
     */
    FormlyAttributes.prototype.ngDoCheck = /**
     * We need to re-evaluate all the attributes on every change detection cycle, because
     * by using a HostBinding we run into certain edge cases. This means that whatever logic
     * is in here has to be super lean or we risk seriously damaging or destroying the performance.
     *
     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317
     * Material issue: https://github.com/angular/material2/issues/14024
     * @return {?}
     */
    function () {
        var _this = this;
        this.uiAttributes.forEach((/**
         * @param {?} attr
         * @return {?}
         */
        function (attr) {
            /** @type {?} */
            var value = _this.to[attr];
            if (_this.uiAttributesCache[attr] !== value) {
                _this.uiAttributesCache[attr] = value;
                if (value || value === 0) {
                    _this.setAttribute(attr, value === true ? attr : "" + value);
                }
                else {
                    _this.renderer.removeAttribute(_this.elementRef.nativeElement, attr);
                }
            }
        }));
    };
    /**
     * @return {?}
     */
    FormlyAttributes.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.detachAttrElement();
    };
    /**
     * @param {?} element
     * @param {?} value
     * @return {?}
     */
    FormlyAttributes.prototype.focusElement = /**
     * @param {?} element
     * @param {?} value
     * @return {?}
     */
    function (element, value) {
        var _this = this;
        if (!element.focus) {
            return;
        }
        /** @type {?} */
        var isFocused = !!this.document.activeElement
            && this.fieldAttrElements
                .some((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return _this.document.activeElement === element || element.contains(_this.document.activeElement); }));
        if (value && !isFocused) {
            element.focus();
        }
        else if (!value && isFocused) {
            element.blur();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FormlyAttributes.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (!this.field.focus) {
            this.field.focus = true;
        }
        if (this.to.focus) {
            this.to.focus(this.field, $event);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FormlyAttributes.prototype.onBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.field.focus) {
            this.field.focus = false;
        }
        if (this.to.blur) {
            this.to.blur(this.field, $event);
        }
    };
    /**
     * @private
     * @return {?}
     */
    FormlyAttributes.prototype.attachAttrElement = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.field['_attrElements']) {
            this.field['_attrElements'].push(this.elementRef.nativeElement);
        }
        else {
            defineHiddenProp(this.field, '_attrElements', [this.elementRef.nativeElement]);
        }
    };
    /**
     * @private
     * @return {?}
     */
    FormlyAttributes.prototype.detachAttrElement = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var index = this.fieldAttrElements.findIndex((/**
         * @param {?} element
         * @return {?}
         */
        function (element) { return element !== _this.elementRef.nativeElement; }));
        if (index !== -1) {
            this.field['_attrElements'].splice(index, 1);
        }
    };
    /**
     * @private
     * @param {?} attr
     * @param {?} value
     * @return {?}
     */
    FormlyAttributes.prototype.setAttribute = /**
     * @private
     * @param {?} attr
     * @param {?} value
     * @return {?}
     */
    function (attr, value) {
        this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);
    };
    FormlyAttributes.decorators = [
        { type: Directive, args: [{
                    selector: '[formlyAttributes]',
                    host: {
                        '[attr.name]': 'field.name',
                        '[attr.step]': 'to.step',
                        '(focus)': 'onFocus($event)',
                        '(blur)': 'onBlur($event)',
                        '(keyup)': 'to.keyup && to.keyup(field, $event)',
                        '(keydown)': 'to.keydown && to.keydown(field, $event)',
                        '(click)': 'to.click && to.click(field, $event)',
                        '(change)': 'to.change && to.change(field, $event)',
                        '(keypress)': 'to.keypress && to.keypress(field, $event)',
                    },
                },] }
    ];
    /** @nocollapse */
    FormlyAttributes.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    FormlyAttributes.propDecorators = {
        field: [{ type: Input, args: ['formlyAttributes',] }]
    };
    return FormlyAttributes;
}());
export { FormlyAttributes };
if (false) {
    /** @type {?} */
    FormlyAttributes.prototype.field;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.document;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.uiAttributesCache;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.uiAttributes;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,