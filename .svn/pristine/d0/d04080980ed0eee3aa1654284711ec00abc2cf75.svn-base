(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngx-formly/core')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/core/json-schema', ['exports', '@angular/core', '@ngx-formly/core'], factory) :
    (factory((global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].core = global['ngx-formly'].core || {}, global['ngx-formly'].core['json-schema'] = {}),global.ng.core,global['ngx-formly'].core));
}(this, (function (exports,i0,core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} v
     * @return {?}
     */
    function isEmpty(v) {
        return v === '' || v === undefined || v === null;
    }
    var FormlyJsonschema = /** @class */ (function () {
        function FormlyJsonschema() {
        }
        /**
         * @param {?} schema
         * @param {?=} options
         * @return {?}
         */
        FormlyJsonschema.prototype.toFieldConfig = /**
         * @param {?} schema
         * @param {?=} options
         * @return {?}
         */
            function (schema, options) {
                return this._toFieldConfig(schema, __assign({ schema: schema }, (options || {})));
            };
        /**
         * @private
         * @param {?} schema
         * @param {?} options
         * @return {?}
         */
        FormlyJsonschema.prototype._toFieldConfig = /**
         * @private
         * @param {?} schema
         * @param {?} options
         * @return {?}
         */
            function (schema, options) {
                var _this = this;
                if (schema.$ref) {
                    schema = this.resolveDefinition(schema, options);
                }
                /** @type {?} */
                var field = {
                    type: this.guessType(schema),
                    defaultValue: schema.default,
                    templateOptions: {
                        label: schema.title,
                        readonly: schema.readOnly,
                        description: schema.description,
                    },
                };
                switch (field.type) {
                    case 'number':
                    case 'integer': {
                        field.parsers = [( /**
                                 * @param {?} v
                                 * @return {?}
                                 */function (v) { return isEmpty(v) ? null : Number(v); })];
                        if (schema.hasOwnProperty('minimum')) {
                            field.templateOptions.min = schema.minimum;
                        }
                        if (schema.hasOwnProperty('maximum')) {
                            field.templateOptions.max = schema.maximum;
                        }
                        if (schema.hasOwnProperty('exclusiveMinimum')) {
                            this.addValidator(field, 'exclusiveMinimum', ( /**
                             * @param {?} c
                             * @return {?}
                             */function (c) { return isEmpty(c.value) || (c.value > schema.exclusiveMinimum); }));
                        }
                        if (schema.hasOwnProperty('exclusiveMaximum')) {
                            this.addValidator(field, 'exclusiveMaximum', ( /**
                             * @param {?} c
                             * @return {?}
                             */function (c) { return isEmpty(c.value) || (c.value < schema.exclusiveMaximum); }));
                        }
                        if (schema.hasOwnProperty('multipleOf')) {
                            field.templateOptions.step = schema.multipleOf;
                            this.addValidator(field, 'multipleOf', ( /**
                             * @param {?} c
                             * @return {?}
                             */function (c) { return isEmpty(c.value) || (c.value % schema.multipleOf === 0); }));
                        }
                        break;
                    }
                    case 'string': {
                        ['minLength', 'maxLength', 'pattern'].forEach(( /**
                         * @param {?} prop
                         * @return {?}
                         */function (prop) {
                            if (schema.hasOwnProperty(prop)) {
                                field.templateOptions[prop] = schema[prop];
                            }
                        }));
                        break;
                    }
                    case 'object': {
                        field.fieldGroup = [];
                        var _a = __read(this.resolveDependencies(schema), 2), propDeps_1 = _a[0], schemaDeps_1 = _a[1];
                        Object.keys(schema.properties || {}).forEach(( /**
                         * @param {?} key
                         * @return {?}
                         */function (key) {
                            /** @type {?} */
                            var f = _this._toFieldConfig(( /** @type {?} */(schema.properties[key])), options);
                            field.fieldGroup.push(f);
                            f.key = key;
                            if (Array.isArray(schema.required) && schema.required.indexOf(key) !== -1) {
                                f.templateOptions.required = true;
                            }
                            if (!f.templateOptions.required && propDeps_1[key]) {
                                f.expressionProperties = {
                                    'templateOptions.required': ( /**
                                     * @param {?} m
                                     * @return {?}
                                     */function (m) {
                                        return m && propDeps_1[key].some(( /**
                                         * @param {?} k
                                         * @return {?}
                                         */function (k) { return !isEmpty(m[k]); }));
                                    }),
                                };
                            }
                            if (schemaDeps_1[key]) {
                                field.fieldGroup.push(__assign({}, _this._toFieldConfig(schemaDeps_1[key], options), { hideExpression: ( /**
                                         * @param {?} m
                                         * @return {?}
                                         */function (m) { return !m || isEmpty(m[key]); }) }));
                            }
                        }));
                        break;
                    }
                    case 'array': {
                        field.fieldGroup = [];
                        Object.defineProperty(field, 'fieldArray', {
                            get: ( /**
                             * @return {?}
                             */function () {
                                if (!Array.isArray(schema.items)) {
                                    // When items is a single schema, the additionalItems keyword is meaningless, and it should not be used.
                                    return _this._toFieldConfig(( /** @type {?} */(schema.items)), options);
                                }
                                /** @type {?} */
                                var itemSchema = schema.items[field.fieldGroup.length]
                                    ? schema.items[field.fieldGroup.length]
                                    : schema.additionalItems;
                                return itemSchema
                                    ? _this._toFieldConfig(( /** @type {?} */(itemSchema)), options)
                                    : null;
                            }),
                            enumerable: true,
                            configurable: true,
                        });
                        break;
                    }
                }
                if (schema.enum) {
                    field.type = 'enum';
                    field.templateOptions.options = schema.enum.map(( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) { return ({ value: value, label: value }); }));
                }
                // map in possible formlyConfig options from the widget property
                if (schema['widget'] && schema['widget'].formlyConfig) {
                    field = core.ɵreverseDeepMerge(schema['widget'].formlyConfig, field);
                }
                // if there is a map function passed in, use it to allow the user to
                // further customize how fields are being mapped
                return options.map ? options.map(field, schema) : field;
            };
        /**
         * @private
         * @param {?} schema
         * @param {?} options
         * @return {?}
         */
        FormlyJsonschema.prototype.resolveDefinition = /**
         * @private
         * @param {?} schema
         * @param {?} options
         * @return {?}
         */
            function (schema, options) {
                var _a = __read(schema.$ref.split('#/'), 2), uri = _a[0], pointer = _a[1];
                if (uri) {
                    throw Error("Remote schemas for " + schema.$ref + " not supported yet.");
                }
                /** @type {?} */
                var definition = !pointer ? null : pointer.split('/').reduce(( /**
                 * @param {?} def
                 * @param {?} path
                 * @return {?}
                 */function (def, path) { return def && def.hasOwnProperty(path) ? def[path] : null; }), options.schema);
                if (!definition) {
                    throw Error("Cannot find a definition for " + schema.$ref + ".");
                }
                if (definition.$ref) {
                    return this.resolveDefinition(definition, options);
                }
                return __assign({}, definition, ['title', 'description', 'default'].reduce(( /**
                 * @param {?} annotation
                 * @param {?} p
                 * @return {?}
                 */function (annotation, p) {
                    if (schema.hasOwnProperty(p)) {
                        annotation[p] = schema[p];
                    }
                    return annotation;
                }), {}));
            };
        /**
         * @private
         * @param {?} schema
         * @return {?}
         */
        FormlyJsonschema.prototype.resolveDependencies = /**
         * @private
         * @param {?} schema
         * @return {?}
         */
            function (schema) {
                /** @type {?} */
                var deps = {};
                /** @type {?} */
                var schemaDeps = {};
                Object.keys(schema.dependencies || {}).forEach(( /**
                 * @param {?} prop
                 * @return {?}
                 */function (prop) {
                    /** @type {?} */
                    var dependency = ( /** @type {?} */(schema.dependencies[prop]));
                    if (Array.isArray(dependency)) {
                        // Property dependencies
                        dependency.forEach(( /**
                         * @param {?} dep
                         * @return {?}
                         */function (dep) {
                            if (!deps[dep]) {
                                deps[dep] = [prop];
                            }
                            else {
                                deps[dep].push(prop);
                            }
                        }));
                    }
                    else {
                        // schema dependencies
                        schemaDeps[prop] = dependency;
                    }
                }));
                return [deps, schemaDeps];
            };
        /**
         * @private
         * @param {?} schema
         * @return {?}
         */
        FormlyJsonschema.prototype.guessType = /**
         * @private
         * @param {?} schema
         * @return {?}
         */
            function (schema) {
                /** @type {?} */
                var type = ( /** @type {?} */(schema.type));
                if (!type && schema.properties) {
                    return 'object';
                }
                return type;
            };
        /**
         * @private
         * @param {?} field
         * @param {?} name
         * @param {?} validator
         * @return {?}
         */
        FormlyJsonschema.prototype.addValidator = /**
         * @private
         * @param {?} field
         * @param {?} name
         * @param {?} validator
         * @return {?}
         */
            function (field, name, validator) {
                field.validators = field.validators || {};
                field.validators[name] = validator;
            };
        FormlyJsonschema.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ FormlyJsonschema.ngInjectableDef = i0.defineInjectable({ factory: function FormlyJsonschema_Factory() { return new FormlyJsonschema(); }, token: FormlyJsonschema, providedIn: "root" });
        return FormlyJsonschema;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormlyJsonschema = FormlyJsonschema;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-formly-core-json-schema.umd.js.map