{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/extensions/field-form/utils.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/templates/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/templates/field-template.type.ts","ng://@ngx-formly/core/lib/extensions/field-expression/utils.ts","ng://@ngx-formly/core/lib/extensions/field-expression/field-expression.ts","ng://@ngx-formly/core/lib/extensions/field-validation/field-validation.ts","ng://@ngx-formly/core/lib/extensions/field-form/field-form.ts","ng://@ngx-formly/core/lib/extensions/core/core.ts","ng://@ngx-formly/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","getKeyPath","field","key","_keyPath","indexOf","replace","path","split","slice","FORMLY_VALIDATORS","assignModelValue","model","paths","isObject","test","clone","getFieldValue","parent","_b","__values","tslib_1.__values","_c","reverseDeepMerge","dest","args","_i","forEach","src","srcArg","isNullOrUndefined","isFunction","obj1","obj2","getPrototypeOf","isArray","undefined","isUndefined","x","RegExp","Observable","changingThisBreaksApplicationSecurity","AbstractControl","Date","getTime","map","v","keys","reduce","newVal","prop","propDescriptor","getOwnPropertyDescriptor","get","defineProperty","defineHiddenProp","defaultValue","enumerable","writable","configurable","wrapProperty","setFn","set","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","templateManipulators","preWrapper","postWrapper","extras","checkExpressionOn","showError","formControl","invalid","touched","options","parentForm","submitted","validation","show","extensions","addConfig","config","_this","type","setType","validator","setValidator","wrapper","setWrapper","manipulators","console","warn","manipulator","setManipulator","validationMessages","addValidatorMessage","name","message","c","extension","option","component","extends","defaultOptions","setTypeWrapper","getType","Error","mergeExtendedType","getMergedField","extendDefaults","optionsTypes","componentRef","createComponent","instance","resolver","injector","cf","_componentFactory","hostView","destroyed","_componentFactoryResolver","getFieldInjector","resolveComponentFactory","getWrapper","getValidator","getValidatorMessage","class","method","extendedType","_injector","Injectable","providedIn","FormlyFormBuilder","formlyConfig","componentFactoryResolver","buildForm","fieldGroup","core","_buildForm","_setOptions","getExtensions","prePopulate","onPopulate","f","postPopulate","formState","fieldChanges","Subject","_markForCheck","_componentRefs","ref","changeDetectorRef","markForCheck","ComponentFactoryResolver","Injector","FormlyForm","formlyBuilder","immutable","parentFormGroup","modelChange","EventEmitter","modelChangeSubs","enableCheckExprDebounce","checkExpressionChange$","pipe","debounceTime","subscribe","checkExpressionChange","_model","_fields","fields","_options","ngDoCheck","ngOnChanges","changes","form","FormGroup","setOptions","clearModelSubscriptions","trackModelChanges","updateInitialValue","ngOnDestroy","unsubscribe","changeModel","event","emit","resetModel","initialModel","k","control","resetForm","reset","oldVal","emitModelChange","_checkField","rootKey","valueChanges","modelOptions","debounce","default","parsers","parserFn","tslib_1.__spread","join","sub","Component","selector","template","providers","Attribute","FormGroupDirective","decorators","Optional","Input","Output","FormlyField","hideDeprecation","className","warnDeprecation","refsUnsubscribe","ngAfterContentInit","triggerHook","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnInit","renderField","containerRef","createWrapperRef","insert","attachComponentRef","destroy","hooks","lifecycle","cfr","fieldComponent","host","[style.display]","[class]","ViewChild","read","ViewContainerRef","FormlyAttributes","renderer","elementRef","_document","uiAttributesCache","uiAttributes","document","templateOptions","setAttribute","nativeElement","id","to","attributes","oldValue","attr","removeAttribute","attachAttrElement","fieldAttrElements","element","focusElement","detachAttrElement","focus","isFocused","activeElement","some","contains","blur","onFocus","$event","onBlur","index","findIndex","splice","Directive","[attr.name]","[attr.step]","(focus)","(blur)","(keyup)","(keydown)","(click)","(change)","(keypress)","Renderer2","ElementRef","Inject","DOCUMENT","FieldType","Field","_super","tslib_1.__extends","registerControl","disabled","enabled","disable","enable","FormControl","patchValue","setControl","FieldArrayType","builder","removeAt","fieldArray","FormArray","_validators","asyncValidators","_asyncValidators","updateOn","add","remove","FieldWrapper","FormlyGroup","FormlyValidationMessage","fieldForm","errors","errorPath","FormlyTemplateType","evalExpression","expression","thisArg","argVal","Function","FieldExpressionExtension","ignoreCache","_expressionProperties","expressionProperties","expressionProperty","expressionValueSetter","evalExpressionValueSetter","argNames","this_1","_evalExpression","subscription_1","onDestroy_1","onDestroy","hideExpression","hide","parent_1","parentExpression","evalStringExpression","checkFieldExpressionChange","checkFieldVisibilityChange","expressionValue","JSON","stringify","updateValueAndValidity","emitEvent","hideExpressionResult","hidden","toggleFormControl","filter","unregisterControl","controls","setParent","removeControl","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","Validators","compose","composeAsync","asyncValidator","opt","required","pattern","minLength","maxLength","min","max","validatorFn","isValid","isPromise","obj","then","result","handleResult","_a","controlErrors","setErrors","_d","FieldFormExtension","addFormControl","controlOptions","setValidators","setAsyncValidators","createControl","CoreExtension","formId","getFieldComponentInstance","fieldTransforms","fieldTransform","initFieldOptions","root","getFieldId","label","placeholder","initFieldWrappers","fieldTemplateManipulators","el","a","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","provide","multi","useFactory","deps","useValue","ANALYZE_FOR_ENTRY_COMPONENTS","forChild","NgModule","declarations","entryComponents","exports","imports","CommonModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { FormlyFieldConfig } from './core';\nimport { Observable } from 'rxjs';\nimport { AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfigCache } from './components/formly.field.config';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: FormlyFieldConfigCache): string[] {\n  if (!field.key) {\n    return [];\n  }\n\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!field._keyPath || field._keyPath.key !== field.key) {\n    const key = field.key.indexOf('[') === -1\n      ? field.key\n      : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n\n    field._keyPath = { key: field.key, path: key.indexOf('.') !== -1 ? key.split('.') : [key] };\n  }\n\n  return field._keyPath.path.slice(0);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function assignModelValue(model: any, paths: string[], value: any) {\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!model[path] || !isObject(model[path])) {\n      model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n\n    model = model[path];\n  }\n\n  model[paths[paths.length - 1]] = clone(value);\n}\n\nexport function getFieldValue(field: FormlyFieldConfig): any {\n  let model = field.parent.model;\n  for (const path of getKeyPath(field)) {\n    if (!model) {\n      return model;\n    }\n    model = model[path];\n  }\n\n  return model;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        if (isFunction(src[srcArg])) {\n          dest[srcArg] = src[srcArg];\n        } else {\n          dest[srcArg] = clone(src[srcArg]);\n        }\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2)\n    && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n    && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nexport function clone(value: any): any {\n  if (!isObject(value) || value instanceof RegExp || value instanceof Observable || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity) {\n    return value;\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  return Object.keys(value).reduce((newVal, prop) => {\n    const propDescriptor = Object.getOwnPropertyDescriptor(value, prop);\n\n    if (propDescriptor.get) {\n      Object.defineProperty(newVal, prop, { ...propDescriptor, get: () => clone(value[prop]) });\n    } else {\n      newVal[prop] = clone(value[prop]);\n    }\n\n    return newVal;\n  }, {});\n}\n\nexport function defineHiddenProp(field, prop, defaultValue) {\n  Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n  field[prop] = defaultValue;\n}\n\nexport function wrapProperty<T = any>(field, prop, setFn: (newVal: T, oldVal?: T) => void) {\n  let value = field[prop];\n  setFn(value);\n\n  Object.defineProperty(field, prop, {\n    configurable: true,\n    get: () => value,\n    set: newVal => {\n      if (newVal !== value) {\n        setFn(newVal, value);\n        value = newVal;\n      }\n    },\n  });\n}\n","import { Injectable, InjectionToken, ComponentRef, ComponentFactoryResolver, Injector } from '@angular/core';\nimport { ValidationErrors, AbstractControl } from '@angular/forms';\nimport { FieldType } from './../templates/field.type';\nimport { reverseDeepMerge, defineHiddenProp } from './../utils';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG = new InjectionToken<FormlyConfig>('FORMLY_CONFIG');\n\n/** @experimental */\nexport interface FormlyExtension {\n  prePopulate?(field: FormlyFieldConfig): void;\n  onPopulate?(field: FormlyFieldConfig): void;\n  postPopulate?(field: FormlyFieldConfig): void;\n}\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable({ providedIn: 'root' })\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n  extras: ConfigOption['extras'] = {\n    checkExpressionOn: 'changeDetectionCheck',\n    showError: function(field: FieldType) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n  extensions: { [name: string]: FormlyExtension } = {};\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      console.warn(`NgxFormly: passing 'manipulators' config is deprecated, use custom extension instead.`);\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach(c => this.extensions[c.name] = c.extension);\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    const type = this.getType(field.type);\n    if (type.defaultOptions) {\n      reverseDeepMerge(field, type.defaultOptions);\n    }\n\n    const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        const defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    const componentRef = this.createComponent(field);\n    if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\n    }\n\n    if (!field.wrappers && type.wrappers) {\n      field.wrappers = [...type.wrappers];\n    }\n  }\n\n  /** @internal */\n  createComponent(\n    field: FormlyFieldConfigCache = {},\n    resolver?: ComponentFactoryResolver,\n    injector?: Injector,\n  ): ComponentRef<FieldType> {\n    if (!field.type) {\n      return;\n    }\n\n    const cf = field._componentFactory;\n    if (cf && field.type === cf.type && (cf.componentRef && cf.componentRef.hostView && !cf.componentRef.hostView.destroyed)) {\n      return field._componentFactory.componentRef;\n    }\n\n    const type = this.getType(field.type);\n    if (!resolver) {\n      resolver = field.parent.options._componentFactoryResolver;\n    }\n    if (!injector) {\n      injector = this.getFieldInjector(field);\n    }\n\n    defineHiddenProp(field, '_componentFactory', {\n      type: field.type,\n      component: type.component,\n      componentRef: resolver\n        ? resolver.resolveComponentFactory(type.component).create(injector)\n        : null,\n    });\n\n    return field._componentFactory.componentRef;\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n\n  private getFieldInjector(field: FormlyFieldConfigCache = {}) {\n    const parent = field.parent;\n    if (parent._componentFactory && parent._componentFactory.componentRef) {\n      return parent._componentFactory.componentRef.injector;\n    }\n\n    return parent.options._injector;\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ExtensionOption {\n  name: string;\n  extension: FormlyExtension;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  extensions?: ExtensionOption[];\n  validationMessages?: ValidationMessageOption[];\n\n  /** @deprecated use `extensions` instead */\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    /** @deprecated use `extensions` instead */\n    fieldTransform?: any,\n    immutable?: boolean,\n    showError?: (field: FieldType) => boolean;\n\n    /**\n     * Defines the option which formly rely on to check field expression properties.\n     * - `modelChange`: perform a check when the value of the form control changes.\n     * - `changeDetectionCheck`: triggers an immediate check when `ngDoCheck` is called.\n    */\n    checkExpressionOn?: 'modelChange' | 'changeDetectionCheck',\n  };\n}\n","import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyConfig } from './formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache, FormlyValueChangeEvent, FormlyFormOptionsCache } from '../components/formly.field.config';\nimport { Subject } from 'rxjs';\nimport { defineHiddenProp } from '../utils';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyFormBuilder {\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n  ) {}\n\n  buildForm(formControl: FormGroup | FormArray, fieldGroup: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    if (!this.formlyConfig.extensions.core) {\n      throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n    }\n\n    this._buildForm({ fieldGroup, model, formControl, options: this._setOptions(options) });\n  }\n\n  private _buildForm(field: FormlyFieldConfigCache) {\n    this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));\n    this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));\n\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f) => this._buildForm(f));\n    }\n\n    this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));\n  }\n\n  private getExtensions() {\n    return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);\n  }\n\n  private _setOptions(options: FormlyFormOptionsCache) {\n    options = options || {};\n    options.formState = options.formState || {};\n\n    if (!options.showError) {\n      options.showError = this.formlyConfig.extras.showError;\n    }\n\n    if (!options.fieldChanges) {\n      defineHiddenProp(options, 'fieldChanges', new Subject<FormlyValueChangeEvent>());\n    }\n\n    if (!options._componentFactoryResolver) {\n      defineHiddenProp(options, '_componentFactoryResolver', this.componentFactoryResolver);\n    }\n\n    if (!options._injector) {\n      defineHiddenProp(options, '_injector', this.injector);\n    }\n\n    if (!options._markForCheck) {\n      options._markForCheck = (field) => {\n        if (field._componentRefs) {\n          field._componentRefs.forEach(ref => ref.changeDetectorRef.markForCheck());\n        }\n\n        if (field.fieldGroup) {\n          field.fieldGroup.forEach(f => options._markForCheck(f));\n        }\n      };\n    }\n\n    return options;\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, OnDestroy, Attribute } from '@angular/core';\nimport { FormGroup, FormArray, FormGroupDirective } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFormOptionsCache } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignModelValue, isNullOrUndefined, wrapProperty, clone, defineHiddenProp } from '../utils';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-content></ng-content>\n  `,\n  providers: [FormlyFormBuilder],\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() form: FormGroup | FormArray;\n\n  @Input()\n  set model(model: any) { this._model = this.immutable ? clone(model) : model; }\n  get model() { return this._model || {}; }\n\n  @Input()\n  set fields(fields: FormlyFieldConfig[]) { this._fields = this.immutable ? clone(fields) : fields; }\n  get fields() { return this._fields || []; }\n\n  @Input()\n  set options(options: FormlyFormOptions) { this._options = this.immutable ? clone(options) : options; }\n  get options() { return this._options; }\n\n  @Output() modelChange = new EventEmitter<any>();\n\n  private immutable = false;\n  private _model: any;\n  private _fields: FormlyFieldConfig[];\n  private _options: FormlyFormOptions;\n  private initialModel: any;\n  private modelChangeSubs: Subscription[] = [];\n\n  private enableCheckExprDebounce = false;\n  private checkExpressionChange$ = this.modelChange.pipe(\n    debounceTime(this.enableCheckExprDebounce ? 100 : 0),\n  ).subscribe(() => {\n    this.enableCheckExprDebounce = true;\n    this.checkExpressionChange();\n    this.enableCheckExprDebounce = false;\n  });\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyConfig: FormlyConfig,\n    // tslint:disable-next-line\n    @Attribute('immutable') immutable,\n    @Optional() private parentFormGroup: FormGroupDirective,\n  ) {\n    this.immutable = (immutable !== null) || !!formlyConfig.extras.immutable;\n  }\n\n  ngDoCheck() {\n    if (this.formlyConfig.extras.checkExpressionOn === 'changeDetectionCheck') {\n      this.checkExpressionChange();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.fields || changes.form || changes.model) {\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n      this.options.updateInitialValue();\n    }\n  }\n\n  ngOnDestroy() {\n    this.clearModelSubscriptions();\n    this.checkExpressionChange$.unsubscribe();\n  }\n\n  changeModel(event: { key: string, value: any }) {\n    assignModelValue(this.model, event.key.split('.'), event.value);\n    this.modelChange.emit(clone(this.model));\n  }\n\n  setOptions() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = (model ?: any) => {\n        model = isNullOrUndefined(model) ? this.initialModel : model;\n        if (this.model) {\n          Object.keys(this.model).forEach(k => delete this.model[k]);\n          Object.assign(this.model, model || {});\n        }\n\n        (<FormlyFormOptionsCache> this.options)._buildForm();\n\n        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n        // but only when the current component is a root one.\n        if (this.options.parentForm && this.options.parentForm.control === this.form) {\n          this.options.parentForm.resetForm(model);\n        } else {\n          this.form.reset(model);\n        }\n      };\n    }\n\n    if (!this.options.parentForm && this.parentFormGroup) {\n      defineHiddenProp(this.options, 'parentForm', this.parentFormGroup);\n      wrapProperty(this.options.parentForm, 'submitted', (newVal, oldVal) => {\n        if (newVal !== !!oldVal) {\n          (<FormlyFormOptionsCache> this.options)._markForCheck({\n            fieldGroup: this.fields,\n            model: this.model,\n            formControl: this.form,\n            options: this.options,\n          });\n        }\n      });\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = () => this.initialModel = clone(this.model);\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._buildForm) {\n      (<FormlyFormOptionsCache> this.options)._buildForm = (emitModelChange = false) => {\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n\n        if (emitModelChange) {\n          this.modelChange.emit(clone(this.model));\n        }\n      };\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.options && (<FormlyFormOptionsCache> this.options)._checkField) {\n      (<FormlyFormOptionsCache> this.options)._checkField({\n        fieldGroup: this.fields,\n        model: this.model,\n        formControl: this.form,\n        options: this.options,\n      });\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && field.type && !field.fieldGroup) {\n        const valueChanges = field.modelOptions.debounce && field.modelOptions.debounce.default\n          ? field.formControl.valueChanges.pipe(debounceTime(field.modelOptions.debounce.default))\n          : field.formControl.valueChanges;\n\n        this.modelChangeSubs.push(valueChanges.subscribe(value => {\n          if (field.parsers && field.parsers.length > 0) {\n            field.parsers.forEach(parserFn => value = parserFn(value));\n          }\n\n          this.changeModel({ key: [...rootKey, field.key].join('.'), value });\n        }));\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, field.key] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n}\n","import {\n  Component, EventEmitter, Input, Output, Type,\n  ViewContainerRef, ViewChild, ComponentRef, SimpleChanges, Attribute, ComponentFactoryResolver,\n  OnInit, OnChanges, OnDestroy, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, Injector,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from './formly.field.config';\nimport { defineHiddenProp } from '../utils';\nimport { FieldWrapper } from '../templates/field.wrapper';\nimport { FieldType } from '../templates/field.type';\n\n@Component({\n  selector: 'formly-field',\n  template: `<ng-template #container></ng-template>`,\n  host: {\n    '[style.display]': 'field.hide ? \"none\":\"\"',\n    '[class]': 'field.className? field.className : className',\n  },\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() field: FormlyFieldConfig;\n  @Input('class') className: string = '';\n\n  warnDeprecation = false;\n\n  @Input() set model(m: any) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set form(form: FormGroup) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set options(options: FormlyFormOptions) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  @ViewChild('container', {read: ViewContainerRef}) containerRef: ViewContainerRef;\n\n  refsUnsubscribe = () => {};\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n    // tslint:disable-next-line\n    @Attribute('hide-deprecation') hideDeprecation,\n  ) {\n    this.warnDeprecation = hideDeprecation === null;\n  }\n\n  ngAfterContentInit() {\n    this.triggerHook('afterContentInit');\n  }\n\n  ngAfterContentChecked() {\n    this.triggerHook('afterContentChecked');\n  }\n\n  ngAfterViewInit() {\n    this.triggerHook('afterViewInit');\n  }\n\n  ngAfterViewChecked() {\n    this.triggerHook('afterViewChecked');\n  }\n\n  ngDoCheck() {\n    this.triggerHook('doCheck');\n  }\n\n  ngOnInit() {\n    this.triggerHook('onInit');\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      this.refsUnsubscribe = this.renderField(this.field, this.containerRef);\n    }\n\n    this.triggerHook('onChanges', changes);\n  }\n\n  ngOnDestroy() {\n    this.triggerHook('onDestroy');\n    this.refsUnsubscribe();\n  }\n\n  private renderField(f: FormlyFieldConfigCache, containerRef: ViewContainerRef) {\n    this.refsUnsubscribe();\n    (f.wrappers || []).forEach(wrapper => {\n      containerRef = this.createWrapperRef(f, containerRef, this.formlyConfig.getWrapper(wrapper));\n    });\n\n    const ref = this.formlyConfig.createComponent(f, this.componentFactoryResolver, this.injector);\n    if (ref) {\n      containerRef.insert(ref.hostView);\n      this.attachComponentRef(ref, f);\n    }\n\n    return () => {\n      (f._componentRefs || []).forEach(componentRef => componentRef.destroy());\n      f._componentRefs = [];\n    };\n  }\n\n  private triggerHook(name: string, changes?: SimpleChanges) {\n    if (this.field.hooks && this.field.hooks[name]) {\n      if (!changes || changes.field) {\n        this.field.hooks[name](this.field);\n      }\n    }\n\n    if (this.field.lifecycle && this.field.lifecycle[name]) {\n      this.field.lifecycle[name](\n        this.field.form,\n        this.field,\n        this.field.model,\n        this.field.options,\n      );\n    }\n  }\n\n  private createWrapperRef<T extends FieldWrapper>(\n    field: FormlyFieldConfigCache,\n    containerRef: ViewContainerRef,\n    config: { component: Type<T>; },\n  ) {\n    const cfr = field.options && field.options._componentFactoryResolver\n      ? field.options._componentFactoryResolver\n      : this.componentFactoryResolver;\n\n    const ref = containerRef.createComponent<T>(cfr.resolveComponentFactory(config.component));\n    this.attachComponentRef(ref, field);\n\n    if (!ref.instance.fieldComponent) {\n      throw Error(`${config.component.prototype.constructor.name}#fieldComponent: missing 'static' flag for '@ViewChild' query, it should be explicitly defined by '@ViewChild(..., { static: true })'.`);\n    }\n\n    return ref.instance.fieldComponent;\n  }\n\n  private attachComponentRef<T extends FieldType>(ref: ComponentRef<T>, field: FormlyFieldConfigCache) {\n    if (field._componentRefs) {\n      field._componentRefs.push(ref);\n    } else {\n      defineHiddenProp(field, '_componentRefs', [ref]);\n    }\n    Object.assign(ref.instance, { field });\n  }\n}\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges, Renderer2, DoCheck, Inject, OnDestroy } from '@angular/core';\nimport { FormlyFieldConfig, FormlyTemplateOptions } from './formly.field.config';\nimport { wrapProperty, defineHiddenProp, FORMLY_VALIDATORS } from '../utils';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({\n  selector: '[formlyAttributes]',\n  host: {\n    '[attr.name]': 'field.name',\n    '[attr.step]': 'to.step',\n\n    '(focus)': 'onFocus($event)',\n    '(blur)': 'onBlur($event)',\n    '(keyup)': 'to.keyup && to.keyup(field, $event)',\n    '(keydown)': 'to.keydown && to.keydown(field, $event)',\n    '(click)': 'to.click && to.click(field, $event)',\n    '(change)': 'to.change && to.change(field, $event)',\n    '(keypress)': 'to.keypress && to.keypress(field, $event)',\n  },\n})\nexport class FormlyAttributes implements OnChanges, DoCheck, OnDestroy {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n\n  private document: Document;\n  private uiAttributesCache: any = {};\n  private uiAttributes = [\n    ...FORMLY_VALIDATORS,\n    'tabindex',\n    'placeholder',\n    'readonly',\n    'disabled',\n  ];\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions || {}; }\n\n  private get fieldAttrElements() { return (this.field && this.field['_attrElements']) || []; }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this.document = _document;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);\n      if (this.to && this.to.attributes) {\n        wrapProperty(this.to, 'attributes', (newVal, oldValue) => {\n          if (oldValue) {\n            Object.keys(oldValue).forEach(attr => this.renderer.removeAttribute(this.elementRef.nativeElement, attr));\n          }\n\n          if (newVal) {\n            Object.keys(newVal).forEach(attr => this.setAttribute(attr, newVal[attr]));\n          }\n        });\n      }\n\n      this.attachAttrElement();\n      if (this.fieldAttrElements.length === 1) {\n        wrapProperty(this.field, 'focus', (value) => {\n          const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n          if (!element) {\n            return;\n          }\n\n          this.focusElement(element, value);\n        });\n      }\n    }\n  }\n\n  /**\n   * We need to re-evaluate all the attributes on every change detection cycle, because\n   * by using a HostBinding we run into certain edge cases. This means that whatever logic\n   * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n   * Material issue: https://github.com/angular/material2/issues/14024\n   */\n  ngDoCheck() {\n    this.uiAttributes.forEach(attr => {\n      const value = this.to[attr];\n      if (this.uiAttributesCache[attr] !== value) {\n        this.uiAttributesCache[attr] = value;\n        if (value || value === 0) {\n          this.setAttribute(attr, value === true ? attr : `${value}`);\n        } else {\n          this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.detachAttrElement();\n  }\n\n  focusElement(element, value: boolean) {\n    if (!element.focus) {\n      return;\n    }\n\n    const isFocused = !!this.document.activeElement\n      && this.fieldAttrElements\n        .some(element => this.document.activeElement === element || element.contains(this.document.activeElement));\n\n    if (value && !isFocused) {\n      element.focus();\n    } else if (!value && isFocused) {\n      element.blur();\n    }\n  }\n\n  onFocus($event) {\n    if (!this.field.focus) {\n      this.field.focus = true;\n    }\n\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n\n  onBlur($event) {\n    if (this.field.focus) {\n      this.field.focus = false;\n    }\n\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n\n  private attachAttrElement() {\n    if (this.field['_attrElements']) {\n      this.field['_attrElements'].push(this.elementRef.nativeElement);\n    } else {\n      defineHiddenProp(this.field, '_attrElements', [this.elementRef.nativeElement]);\n    }\n  }\n\n  private detachAttrElement() {\n    const index = this.fieldAttrElements.findIndex(element => element !== this.elementRef.nativeElement);\n    if (index !== -1) {\n      this.field['_attrElements'].splice(index, 1);\n    }\n  }\n\n  private setAttribute(attr: string, value: string) {\n    this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldType<F extends FormlyFieldConfig = FormlyFieldConfig> {\n  @Input() field: F;\n  defaultOptions?: F;\n\n  @Input()\n  get model() { return this.field.model; }\n  set model(m: any) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get form() { return <FormGroup> this.field.parent.formControl; }\n  set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get options() { return this.field.options; }\n  set options(options: F['options']) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  get key() { return this.field.key; }\n\n  get formControl() { return this.field.formControl; }\n\n  get to() { return this.field.templateOptions || {}; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n/**\n * @deprecated use `FieldType` instead\n */\nexport abstract class Field extends FieldType {\n  constructor() {\n    super();\n    console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n  }\n}\n","import { FormArray, FormGroup, FormControl } from '@angular/forms';\nimport { FormlyFieldConfig } from '../../core';\nimport { getKeyPath, getFieldValue, isNullOrUndefined, defineHiddenProp } from '../../utils';\n\nexport function unregisterControl(field: FormlyFieldConfig) {\n  const form = field.formControl.parent as FormArray | FormGroup;\n  if (form instanceof FormArray) {\n    const key = form.controls.findIndex(c => c === field.formControl);\n    if (key !== -1) {\n      form.removeAt(key);\n      field.formControl.setParent(null);\n    }\n  } else if (form instanceof FormGroup) {\n    const paths = getKeyPath(field);\n    form.removeControl(paths[paths.length - 1]);\n    field.formControl.setParent(null);\n  }\n}\n\nexport function registerControl(field: FormlyFieldConfig, control?: any) {\n  control = control || field.formControl;\n  if (!field.formControl && control) {\n    defineHiddenProp(field, 'formControl', control);\n    if (field.templateOptions.disabled && control.enabled) {\n      control.disable();\n    }\n\n    if (delete field.templateOptions.disabled) {\n      Object.defineProperty(field.templateOptions, 'disabled', {\n        get: () => !field.formControl.enabled,\n        set: (value: boolean) => value ? field.formControl.disable() : field.formControl.enable(),\n        enumerable: true,\n        configurable: true,\n      });\n    }\n  }\n\n  let parent = field.parent.formControl as FormGroup;\n  if (!parent) {\n    return;\n  }\n\n  const paths = getKeyPath(field);\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!parent.get([path])) {\n      registerControl({\n        key: path,\n        formControl: new FormGroup({}),\n        parent: { formControl: parent },\n      });\n    }\n\n    parent = <FormGroup> parent.get([path]);\n  }\n\n  const value = getFieldValue(field);\n  if (\n    !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n    && control.value !== value\n    && control instanceof FormControl\n  ) {\n    control.patchValue(value);\n  }\n  const key = paths[paths.length - 1];\n  if (parent.get([key]) !== control) {\n    parent.setControl(key, control);\n  }\n}\n","import { Inject, Optional } from '@angular/core';\nimport { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';\nimport { FORMLY_CONFIG, FormlyExtension } from '../services/formly.config';\nimport { registerControl } from '../extensions/field-form/utils';\n\nexport abstract class FieldArrayType<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> implements FormlyExtension {\n  formControl: FormArray;\n  defaultOptions: any = {\n    defaultValue: [],\n  };\n\n  constructor(@Inject(FORMLY_CONFIG) @Optional() builder?: FormlyFormBuilder) {\n    super();\n\n    if (builder instanceof FormlyFormBuilder) {\n      console.warn(`NgxFormly: passing 'FormlyFormBuilder' to '${this.constructor.name}' type is not required anymore, you may remove it!`);\n    }\n  }\n\n  onPopulate(field: FormlyFieldConfig) {\n    field.fieldGroup = field.fieldGroup || [];\n    if (field.fieldGroup.length > field.model.length) {\n      for (let i = field.fieldGroup.length; i >= field.model.length; --i) {\n        (field.formControl as FormArray).removeAt(i);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < field.model.length; i++) {\n      const f = { ...clone(field.fieldArray), key: `${i}` };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.formControl) {\n      return;\n    }\n\n    registerControl(field, new FormArray(\n      field.fieldGroup.map(f => f.formControl),\n      {\n        validators: field._validators,\n        asyncValidators: field._asyncValidators,\n        updateOn: field.modelOptions.updateOn,\n      },\n    ));\n  }\n\n  add(i?: number, initialModel?: any) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n\n    (<any> this.options)._buildForm(true);\n  }\n\n  remove(i: number) {\n    this.model.splice(i, 1);\n    this.formControl.removeAt(i);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, key) => f.key = `${key}`);\n\n    (<any> this.options)._buildForm(true);\n  }\n}\n","import { ViewContainerRef } from '@angular/core';\nimport { FieldType } from './field.type';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldWrapper<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> {\n  fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n  host: {\n    '[class]': 'field.fieldGroupClassName || \"\"',\n  },\n})\nexport class FormlyGroup extends FieldType {\n  defaultOptions = {\n    defaultValue: {},\n  };\n}\n","import { Component, Input } from '@angular/core';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { isObject } from '../utils';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage }}`,\n})\nexport class FormlyValidationMessage {\n  @Input() field: FormlyFieldConfig;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  get errorMessage(): string {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: string | Function = this.formlyConfig.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-template',\n  template: `<div [innerHtml]=\"field.template\"></div>`,\n})\nexport class FormlyTemplateType extends FieldType {}\n","export function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    if (expression.indexOf('this.field') !== -1) {\n      console.warn(`NgxFormly: using 'this.field' in expressionProperties is deprecated since v5.1, use 'field' instead.`);\n    }\n\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `${expression} = expressionValue;`) as (value: any) => void;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { FormlyFieldConfig, FormlyValueChangeEvent, FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { isObject, isNullOrUndefined, isFunction, FORMLY_VALIDATORS, defineHiddenProp } from '../../utils';\nimport { evalExpression, evalStringExpression, evalExpressionValueSetter } from './utils';\nimport { Observable } from 'rxjs';\nimport { FormlyExtension } from '../../services/formly.config';\nimport { unregisterControl, registerControl } from '../field-form/utils';\n\n/** @experimental */\nexport class FieldExpressionExtension implements FormlyExtension {\n  prePopulate(field: FormlyFieldConfigCache) {\n    if (field.parent || field.options._checkField) {\n      return;\n    }\n\n    field.options._checkField = (f, ignoreCache) => this._checkField(f, ignoreCache);\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || field._expressionProperties) {\n      return;\n    }\n\n    // cache built expression\n    defineHiddenProp(field, '_expressionProperties', {});\n\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties) {\n        const expressionProperty = field.expressionProperties[key],\n          expressionValueSetter = evalExpressionValueSetter(\n            `field.${key}`,\n            ['expressionValue', 'model', 'field'],\n          );\n\n        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n          field._expressionProperties[key] = {\n            expression: this._evalExpression(\n              expressionProperty,\n              field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                ? () => field.parent.templateOptions.disabled\n                : undefined,\n            ),\n            expressionValueSetter,\n          };\n          if (key === 'templateOptions.disabled') {\n            Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n              get: () => field.templateOptions.disabled,\n              set: () => { },\n              enumerable: true,\n              configurable: true,\n            });\n          }\n        } else if (expressionProperty instanceof Observable) {\n          const subscription = (expressionProperty as Observable<any>)\n            .subscribe(v => evalExpression(expressionValueSetter, { field }, [v, field.model, field]));\n\n          const onDestroy = field.hooks.onDestroy;\n          field.hooks.onDestroy = (field) => {\n            onDestroy && onDestroy(field);\n            subscription.unsubscribe();\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n\n      let parent = field.parent;\n      while (parent && !parent.hideExpression) {\n        parent = parent.parent;\n      }\n\n      field.hideExpression = this._evalExpression(\n        field.hideExpression,\n        parent && parent.hideExpression ? () => parent.hide : undefined,\n      );\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    field.options._checkField(field, true);\n  }\n\n  private _evalExpression(expression, parentExpression?) {\n    expression = expression || (() => false);\n    if (typeof expression === 'string') {\n      expression = evalStringExpression(expression, ['model', 'formState', 'field']);\n    }\n\n    return parentExpression\n      ? (model: any, formState: any, field: FormlyFieldConfig) => parentExpression() || expression(model, formState, field)\n      : expression;\n  }\n\n  private _checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    let markForCheck = false;\n    field.fieldGroup.forEach(f => {\n      this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);\n      this.checkFieldVisibilityChange(f, ignoreCache) && (markForCheck = true);\n\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\n        this._checkField(f, ignoreCache);\n      }\n    });\n\n    if (markForCheck && field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n  }\n\n  private checkFieldExpressionChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || !field._expressionProperties) {\n      return false;\n    }\n\n    let markForCheck = false;\n    const expressionProperties = field._expressionProperties;\n    const validators = FORMLY_VALIDATORS.map(v => `templateOptions.${v}`);\n\n    for (const key in expressionProperties) {\n      let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState, field]);\n      if (key === 'templateOptions.disabled') {\n        expressionValue = !!expressionValue;\n      }\n\n      if (\n        ignoreCache || (\n          expressionProperties[key].expressionValue !== expressionValue\n          && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n        )\n      ) {\n        markForCheck = true;\n        expressionProperties[key].expressionValue = expressionValue;\n        evalExpression(\n          expressionProperties[key].expressionValueSetter,\n          { field },\n          [expressionValue, field.model, field],\n        );\n\n        if (key.indexOf('model.') === 0) {\n          const path = key.replace(/^model\\./, ''),\n            control = field.key && key === path ? field.formControl : field.parent.formControl.get(path);\n\n          if (\n            control\n            && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))\n            && control.value !== expressionValue\n          ) {\n            control.patchValue(expressionValue);\n          }\n        }\n\n        if (validators.indexOf(key) !== -1 && field.formControl) {\n          field.formControl.updateValueAndValidity({ emitEvent: false });\n        }\n      }\n    }\n\n    return markForCheck;\n  }\n\n  private checkFieldVisibilityChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return false;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [field.model, field.options.formState, field],\n    );\n    let markForCheck = false;\n    if (hideExpressionResult !== field.hide || ignoreCache) {\n      markForCheck = true;\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n      this.toggleFormControl(field, hideExpressionResult);\n    }\n\n    return markForCheck;\n  }\n\n  private toggleFormControl(field: FormlyFieldConfig, hide: boolean) {\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.hideExpression)\n        .forEach(f => this.toggleFormControl(f, hide));\n    }\n\n    if (field.formControl && field.key) {\n      if (hide === true && field.formControl.parent) {\n        unregisterControl(field);\n      } else if (hide === false && !field.formControl.parent) {\n        registerControl(field);\n      }\n    }\n\n    if (field.options.fieldChanges) {\n      field.options.fieldChanges.next(<FormlyValueChangeEvent> { field: field, type: 'hidden', value: hide });\n    }\n  }\n}\n","import { FormlyExtension, FieldValidatorFn, FormlyConfig } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { isObject, FORMLY_VALIDATORS, defineHiddenProp, isUndefined, isPromise } from '../../utils';\n\n/** @experimental */\nexport class FieldValidationExtension implements FormlyExtension {\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || !field.key) {\n      return;\n    }\n\n    this.initFieldValidation(field, 'validators');\n    this.initFieldValidation(field, 'asyncValidators');\n  }\n\n  private initFieldValidation(field: FormlyFieldConfigCache, type: 'validators' | 'asyncValidators') {\n    if (!isUndefined(field['_' + type])) {\n      // Avoid overriding existing validators defined through directive (https://github.com/ngx-formly/ngx-formly/issues/1578)\n      if (field.formControl) {\n        const validator = type === 'validators' ? field.formControl.validator : field.formControl.asyncValidator;\n        if (field['_' + type] !== validator) {\n          field['_' + type] = validator;\n        }\n      }\n\n      return;\n    }\n\n    const validators: ValidatorFn[] = type === 'validators' ? this.getPredefinedFieldValidation(field) : [];\n    if (field[type]) {\n      for (const validatorName in field[type]) {\n        if (validatorName === 'validation' && !Array.isArray(field[type].validation)) {\n          field[type].validation = [field[type].validation];\n          console.warn(`NgxFormly(${field.key}): passing a non array value to the 'validation' is deprecated, pass an array instead`);\n        }\n\n        validatorName === 'validation'\n          ? validators.push(...field[type].validation.map(v => this.wrapNgValidatorFn(field, v)))\n          : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName))\n        ;\n      }\n    }\n\n    defineHiddenProp(\n      field,\n      '_' + type,\n      type === 'validators' ? Validators.compose(validators) : Validators.composeAsync(validators as any),\n    );\n  }\n\n  private getPredefinedFieldValidation(field: FormlyFieldConfigCache): ValidatorFn[] {\n    return FORMLY_VALIDATORS\n      .filter(opt => (field.templateOptions && field.templateOptions.hasOwnProperty(opt)) || (field.expressionProperties && field.expressionProperties[`templateOptions.${opt}`]))\n      .map((opt) => (control: AbstractControl) => {\n        const value = field.templateOptions[opt];\n        if (value === false) {\n          return null;\n        }\n        switch (opt) {\n          case 'required':\n            return Validators.required(control);\n          case 'pattern':\n            return Validators.pattern(value)(control);\n          case 'minLength':\n            return Validators.minLength(value)(control);\n          case 'maxLength':\n            return Validators.maxLength(value)(control);\n          case 'min':\n            return Validators.min(value)(control);\n          case 'max':\n            return Validators.max(value)(control);\n        }\n      });\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfigCache, validator: string | FieldValidatorFn, validatorName?: string) {\n    return (control: AbstractControl) => {\n      let validatorFn = validator as FieldValidatorFn;\n      if (typeof validator === 'string') {\n        validatorFn = this.formlyConfig.getValidator(validator).validation;\n      }\n      if (isObject(validator)) {\n        validatorFn = (validator as any).expression;\n      }\n\n      const isValid = validatorFn(control, field);\n      if (validatorName) {\n        if (isPromise(isValid)) {\n          return isValid.then((result: boolean) => {\n            // workaround for https://github.com/angular/angular/issues/13200\n            if (field.options && field.options._markForCheck) {\n              field.options._markForCheck(field);\n            }\n\n            return this.handleResult(field, result, { validatorName, validator });\n          });\n        }\n\n        return this.handleResult(field, isValid, { validatorName, validator });\n      }\n\n      return isValid;\n    };\n  }\n\n  private handleResult(field: FormlyFieldConfigCache, isValid, { validatorName, validator }) {\n    if (isObject(validator) && field.formControl && validator.errorPath) {\n      const control = field.formControl.get(validator.errorPath);\n      if (control) {\n        const controlErrors = (control.errors || {});\n        if (!isValid) {\n          control.setErrors({ ...controlErrors, [validatorName]: { message: validator.message } });\n        } else {\n          delete controlErrors[validatorName];\n          control.setErrors(Object.keys(controlErrors).length === 0 ? null : controlErrors);\n        }\n      }\n\n      return isValid ? null : { [validatorName]: { errorPath: validator.errorPath } };\n    }\n\n    return isValid ? null : { [validatorName]: true };\n  }\n}\n","import { FormlyExtension } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, FormGroup, FormControl, AbstractControlOptions } from '@angular/forms';\nimport { getKeyPath, getFieldValue, defineHiddenProp } from '../../utils';\nimport { registerControl } from './utils';\n\n/** @experimental */\nexport class FieldFormExtension implements FormlyExtension {\n  onPopulate(field: FormlyFieldConfigCache) {\n    // TODO: add an option to skip extension\n    if (field.fieldArray) {\n      return;\n    }\n\n    if (field.key && field.type) {\n      this.addFormControl(field);\n    }\n\n    if (field.parent && field.fieldGroup && !field.key) {\n      defineHiddenProp(field, 'formControl', field.parent.formControl);\n    }\n  }\n\n  private addFormControl(field: FormlyFieldConfigCache) {\n    const controlOptions: AbstractControlOptions = {\n      validators: field._validators,\n      asyncValidators: field._asyncValidators,\n      updateOn: field.modelOptions.updateOn,\n    };\n    let control: AbstractControl;\n\n    const form = field.parent.formControl as FormGroup;\n    const value = getFieldValue(field);\n    const paths = getKeyPath(field);\n    if (field.formControl instanceof AbstractControl || (form && form.get(paths))) {\n      control = field.formControl || form.get(paths);\n      if (\n        (controlOptions.validators !== control.validator)\n        || (controlOptions.asyncValidators !== control.asyncValidator)\n      ) {\n        if (controlOptions.validators !== control.validator) {\n          control.setValidators(controlOptions.validators);\n        }\n        if (controlOptions.asyncValidators !== control.asyncValidator) {\n          control.setAsyncValidators(controlOptions.asyncValidators);\n        }\n        control.updateValueAndValidity();\n      }\n    } else if (field._componentFactory && field._componentFactory.component && field._componentFactory.component.createControl) {\n      const component = field._componentFactory.component;\n      console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);\n      control = component.createControl(value, field);\n    } else if (field.fieldGroup) {\n      // TODO: move to postPopulate\n      control = new FormGroup({}, controlOptions);\n    } else {\n      control = new FormControl(value, controlOptions);\n    }\n\n    registerControl(field, control);\n  }\n}\n","import { FormlyExtension, FormlyConfig, TemplateManipulators } from '../../services/formly.config';\nimport { FormlyFieldConfigCache, FormlyFieldConfig } from '../../components/formly.field.config';\nimport { FormGroup } from '@angular/forms';\nimport { getFieldId, assignModelValue, isUndefined, getFieldValue, reverseDeepMerge, getKeyPath } from '../../utils';\n\n/** @experimental */\nexport class CoreExtension implements FormlyExtension {\n  private formId = 0;\n  constructor(private formlyConfig: FormlyConfig) { }\n\n  prePopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).prePopulate();\n    if (field.parent) {\n      return;\n    }\n\n    const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {\n      if (fieldTransform) {\n        console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);\n        const fieldGroup = fieldTransform(field.fieldGroup, field.model, <FormGroup>field.formControl, field.options);\n        if (!fieldGroup) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldOptions(field);\n    this.getFieldComponentInstance(field).onPopulate();\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f, index) => {\n        Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n        Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n        this.formId++;\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).postPopulate();\n  }\n\n  private initFieldOptions(field: FormlyFieldConfigCache) {\n    const root = <FormlyFieldConfigCache> field.parent;\n    if (!root) {\n      return;\n    }\n\n    Object.defineProperty(field, 'form', { get: () => root.formControl, configurable: true });\n    Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n    Object.defineProperty(field, 'model', {\n      get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,\n      configurable: true,\n    });\n\n    reverseDeepMerge(field, {\n      id: getFieldId(`formly_${this.formId}`, field, field['index']),\n      hooks: {},\n      modelOptions: {},\n      templateOptions: !field.type || !field.key ? {} : {\n        label: '',\n        placeholder: '',\n        focus: false,\n      },\n    });\n\n    if (field.lifecycle) {\n      console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);\n    }\n\n    if (field.template && field.type !== 'formly-template') {\n      if (field.type) {\n        console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n      }\n      field.type = 'formly-template';\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n    }\n\n    if (!isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n      assignModelValue(root.model, getKeyPath(field), field.defaultValue);\n    }\n\n    this.initFieldWrappers(field);\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    field.wrappers = field.wrappers || [];\n    const fieldTemplateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n      ...(field.templateOptions.templateManipulators || {}),\n    };\n\n    field.wrappers = [\n      ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.preWrapper.map(m => m(field)),\n      ...field.wrappers,\n      ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.postWrapper.map(m => m(field)),\n    ].filter((el, i, a) => el && i === a.indexOf(el));\n  }\n\n  private getFieldComponentInstance(field: FormlyFieldConfigCache) {\n    const componentRef = this.formlyConfig.createComponent(field);\n    const instance: FormlyExtension = componentRef ? componentRef.instance as any : {};\n\n    return {\n      prePopulate: () => instance.prePopulate && instance.prePopulate(field),\n      onPopulate: () => instance.onPopulate && instance.onPopulate(field),\n      postPopulate: () => instance.postPopulate && instance.postPopulate(field),\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyGroup } from './templates/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\nimport { FormlyTemplateType } from './templates/field-template.type';\n\nimport { FieldExpressionExtension } from './extensions/field-expression/field-expression';\nimport { FieldValidationExtension } from './extensions/field-validation/field-validation';\nimport { FieldFormExtension } from './extensions/field-form/field-form';\nimport { CoreExtension } from './extensions/core/core';\n\nexport function defaultFormlyConfig(formlyConfig: FormlyConfig): ConfigOption {\n  return {\n    types: [\n      { name: 'formly-group', component: FormlyGroup },\n      { name: 'formly-template', component: FormlyTemplateType },\n    ],\n    extensions: [\n      { name: 'core', extension: new CoreExtension(formlyConfig) },\n      { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },\n      { name: 'field-form', extension: new FieldFormExtension() },\n      { name: 'field-expression', extension: new FieldExpressionExtension() },\n    ],\n  };\n}\n\n@NgModule({\n  declarations: [\n    FormlyForm,\n    FormlyField,\n    FormlyAttributes,\n    FormlyGroup,\n    FormlyValidationMessage,\n    FormlyTemplateType,\n  ],\n  entryComponents: [FormlyGroup, FormlyTemplateType],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [CommonModule],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyConfig,\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  constructor(\n    configService: FormlyConfig,\n    @Optional() @Inject(FORMLY_CONFIG) configs: ConfigOption[] = [],\n  ) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach(config => configService.addConfig(config));\n  }\n}\n"]}