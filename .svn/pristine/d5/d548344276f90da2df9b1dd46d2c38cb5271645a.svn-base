/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ViewContainerRef, Renderer2 } from '@angular/core';
import { FieldWrapper, ÉµdefineHiddenProp as defineHiddenProp } from '@ngx-formly/core';
import { MatFormField } from '@angular/material/form-field';
import { MatFormFieldControl } from '@angular/material/form-field';
import { Subject } from 'rxjs';
import { FieldType } from './field.type';
/**
 * @record
 */
function MatFormlyFieldConfig() { }
if (false) {
    /** @type {?} */
    MatFormlyFieldConfig.prototype._matprefix;
    /** @type {?} */
    MatFormlyFieldConfig.prototype._matsuffix;
    /** @type {?} */
    MatFormlyFieldConfig.prototype.__formField__;
    /** @type {?} */
    MatFormlyFieldConfig.prototype._componentFactory;
}
export class FormlyWrapperFormField extends FieldWrapper {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.stateChanges = new Subject();
        this._errorState = false;
        this.initialGapCalculated = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.formField._control = this;
        defineHiddenProp(this.field, '__formField__', this.formField);
        /** @type {?} */
        const fieldComponent = this.formlyField['_componentFactory'];
        if (fieldComponent && !(fieldComponent.componentRef.instance instanceof FieldType)) {
            console.warn(`Component '${fieldComponent.component.prototype.constructor.name}' must extend 'FieldType' from '@ngx-formly/material'.`);
        }
        // fix for https://github.com/angular/material2/issues/11437
        if (this.formlyField.hide && (/** @type {?} */ (this.formlyField.templateOptions)).appearance === 'outline') {
            this.initialGapCalculated = true;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (!this.initialGapCalculated || this.formlyField.hide) {
            return;
        }
        this.formField.updateOutlineGap();
        this.initialGapCalculated = true;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // temporary fix for https://github.com/angular/material2/issues/7891
        if (this.formField.underlineRef && this.to.hideFieldUnderline === true) {
            this.renderer.removeClass(this.formField.underlineRef.nativeElement, 'mat-form-field-underline');
            this.renderer.removeClass(this.formField.underlineRef.nativeElement.firstChild, 'mat-form-field-ripple');
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        delete this.formlyField.__formField__;
        this.stateChanges.complete();
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    setDescribedByIds(ids) { }
    /**
     * @param {?} event
     * @return {?}
     */
    onContainerClick(event) {
        this.formlyField.focus = true;
        this.stateChanges.next();
    }
    /**
     * @return {?}
     */
    get errorState() {
        /** @type {?} */
        const showError = (/** @type {?} */ ((/** @type {?} */ (this.options)).showError))(this);
        if (showError !== this._errorState) {
            this._errorState = showError;
            this.stateChanges.next();
        }
        return showError;
    }
    /**
     * @return {?}
     */
    get controlType() { return this.to.type; }
    /**
     * @return {?}
     */
    get focused() { return !!this.formlyField.focus && !this.disabled; }
    /**
     * @return {?}
     */
    get disabled() { return !!this.to.disabled; }
    /**
     * @return {?}
     */
    get required() { return !!this.to.required; }
    /**
     * @return {?}
     */
    get placeholder() { return this.to.placeholder || ''; }
    /**
     * @return {?}
     */
    get shouldPlaceholderFloat() { return this.shouldLabelFloat; }
    /**
     * @return {?}
     */
    get value() { return this.formControl.value; }
    /**
     * @return {?}
     */
    get ngControl() { return (/** @type {?} */ (this.formControl)); }
    /**
     * @return {?}
     */
    get empty() { return !this.formControl.value; }
    /**
     * @return {?}
     */
    get shouldLabelFloat() { return this.focused || !this.empty; }
    /**
     * @return {?}
     */
    get formlyField() { return (/** @type {?} */ (this.field)); }
}
FormlyWrapperFormField.decorators = [
    { type: Component, args: [{
                selector: 'formly-wrapper-mat-form-field',
                template: `
    <!-- fix https://github.com/angular/material2/pull/7083 by setting width to 100% -->
    <mat-form-field
      [hideRequiredMarker]="true"
      [floatLabel]="to.floatLabel"
      [appearance]="to.appearance"
      [color]="to.color"
      [style.width]="'100%'">
      <ng-container #fieldComponent></ng-container>
      <mat-label *ngIf="to.label && to.hideLabel !== true">
        {{ to.label }}
        <span *ngIf="to.required && to.hideRequiredMarker !== true" class="mat-form-field-required-marker">*</span>
      </mat-label>

      <ng-container matPrefix>
        <ng-container *ngTemplateOutlet="to.prefix ? to.prefix : formlyField._matprefix"></ng-container>
      </ng-container>

      <ng-container matSuffix>
        <ng-container *ngTemplateOutlet="to.suffix ? to.suffix : formlyField._matsuffix"></ng-container>
      </ng-container>

      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->
      <mat-error [id]="null">
        <formly-validation-message [field]="field"></formly-validation-message>
      </mat-error>
      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->
      <mat-hint *ngIf="to.description" [id]="null">{{ to.description }}</mat-hint>
    </mat-form-field>
  `,
                providers: [{ provide: MatFormFieldControl, useExisting: FormlyWrapperFormField }]
            }] }
];
/** @nocollapse */
FormlyWrapperFormField.ctorParameters = () => [
    { type: Renderer2 }
];
FormlyWrapperFormField.propDecorators = {
    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }],
    formField: [{ type: ViewChild, args: [MatFormField,] }]
};
if (false) {
    /** @type {?} */
    FormlyWrapperFormField.prototype.fieldComponent;
    /** @type {?} */
    FormlyWrapperFormField.prototype.formField;
    /** @type {?} */
    FormlyWrapperFormField.prototype.stateChanges;
    /** @type {?} */
    FormlyWrapperFormField.prototype._errorState;
    /**
     * @type {?}
     * @private
     */
    FormlyWrapperFormField.prototype.initialGapCalculated;
    /**
     * @type {?}
     * @private
     */
    FormlyWrapperFormField.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,