/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Renderer2, Inject } from '@angular/core';
import { wrapProperty, defineHiddenProp, FORMLY_VALIDATORS } from '../utils';
import { DOCUMENT } from '@angular/common';
export class FormlyAttributes {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     * @param {?} _document
     */
    constructor(renderer, elementRef, _document) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.uiAttributesCache = {};
        this.uiAttributes = [
            ...FORMLY_VALIDATORS,
            'tabindex',
            'placeholder',
            'readonly',
            'disabled',
        ];
        this.document = _document;
    }
    /**
     * @return {?}
     */
    get to() { return this.field.templateOptions || {}; }
    /**
     * @private
     * @return {?}
     */
    get fieldAttrElements() { return (this.field && this.field['_attrElements']) || []; }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.field) {
            this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);
            if (this.to && this.to.attributes) {
                wrapProperty(this.to, 'attributes', (/**
                 * @param {?} newVal
                 * @param {?} oldValue
                 * @return {?}
                 */
                (newVal, oldValue) => {
                    if (oldValue) {
                        Object.keys(oldValue).forEach((/**
                         * @param {?} attr
                         * @return {?}
                         */
                        attr => this.renderer.removeAttribute(this.elementRef.nativeElement, attr)));
                    }
                    if (newVal) {
                        Object.keys(newVal).forEach((/**
                         * @param {?} attr
                         * @return {?}
                         */
                        attr => this.setAttribute(attr, newVal[attr])));
                    }
                }));
            }
            this.attachAttrElement();
            if (this.fieldAttrElements.length === 1) {
                wrapProperty(this.field, 'focus', (/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => {
                    /** @type {?} */
                    const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;
                    if (!element) {
                        return;
                    }
                    this.focusElement(element, value);
                }));
            }
        }
    }
    /**
     * We need to re-evaluate all the attributes on every change detection cycle, because
     * by using a HostBinding we run into certain edge cases. This means that whatever logic
     * is in here has to be super lean or we risk seriously damaging or destroying the performance.
     *
     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317
     * Material issue: https://github.com/angular/material2/issues/14024
     * @return {?}
     */
    ngDoCheck() {
        this.uiAttributes.forEach((/**
         * @param {?} attr
         * @return {?}
         */
        attr => {
            /** @type {?} */
            const value = this.to[attr];
            if (this.uiAttributesCache[attr] !== value) {
                this.uiAttributesCache[attr] = value;
                if (value || value === 0) {
                    this.setAttribute(attr, value === true ? attr : `${value}`);
                }
                else {
                    this.renderer.removeAttribute(this.elementRef.nativeElement, attr);
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.detachAttrElement();
    }
    /**
     * @param {?} element
     * @param {?} value
     * @return {?}
     */
    focusElement(element, value) {
        if (!element.focus) {
            return;
        }
        /** @type {?} */
        const isFocused = !!this.document.activeElement
            && this.fieldAttrElements
                .some((/**
             * @param {?} element
             * @return {?}
             */
            element => this.document.activeElement === element || element.contains(this.document.activeElement)));
        if (value && !isFocused) {
            element.focus();
        }
        else if (!value && isFocused) {
            element.blur();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        if (!this.field.focus) {
            this.field.focus = true;
        }
        if (this.to.focus) {
            this.to.focus(this.field, $event);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBlur($event) {
        if (this.field.focus) {
            this.field.focus = false;
        }
        if (this.to.blur) {
            this.to.blur(this.field, $event);
        }
    }
    /**
     * @private
     * @return {?}
     */
    attachAttrElement() {
        if (this.field['_attrElements']) {
            this.field['_attrElements'].push(this.elementRef.nativeElement);
        }
        else {
            defineHiddenProp(this.field, '_attrElements', [this.elementRef.nativeElement]);
        }
    }
    /**
     * @private
     * @return {?}
     */
    detachAttrElement() {
        /** @type {?} */
        const index = this.fieldAttrElements.findIndex((/**
         * @param {?} element
         * @return {?}
         */
        element => element !== this.elementRef.nativeElement));
        if (index !== -1) {
            this.field['_attrElements'].splice(index, 1);
        }
    }
    /**
     * @private
     * @param {?} attr
     * @param {?} value
     * @return {?}
     */
    setAttribute(attr, value) {
        this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);
    }
}
FormlyAttributes.decorators = [
    { type: Directive, args: [{
                selector: '[formlyAttributes]',
                host: {
                    '[attr.name]': 'field.name',
                    '[attr.step]': 'to.step',
                    '(focus)': 'onFocus($event)',
                    '(blur)': 'onBlur($event)',
                    '(keyup)': 'to.keyup && to.keyup(field, $event)',
                    '(keydown)': 'to.keydown && to.keydown(field, $event)',
                    '(click)': 'to.click && to.click(field, $event)',
                    '(change)': 'to.change && to.change(field, $event)',
                    '(keypress)': 'to.keypress && to.keypress(field, $event)',
                },
            },] }
];
/** @nocollapse */
FormlyAttributes.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
FormlyAttributes.propDecorators = {
    field: [{ type: Input, args: ['formlyAttributes',] }]
};
if (false) {
    /** @type {?} */
    FormlyAttributes.prototype.field;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.document;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.uiAttributesCache;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.uiAttributes;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,