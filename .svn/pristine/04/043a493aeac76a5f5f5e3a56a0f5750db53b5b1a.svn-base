!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/common"),require("@angular/forms"),require("@ngx-formly/core"),require("@ngx-formly/core/select"),require("@angular/material/select"),require("@angular/core"),require("@ngx-formly/material/form-field"),require("@angular/material/core")):"function"==typeof define&&define.amd?define("@ngx-formly/material/select",["exports","@angular/common","@angular/forms","@ngx-formly/core","@ngx-formly/core/select","@angular/material/select","@angular/core","@ngx-formly/material/form-field","@angular/material/core"],t):t((e["ngx-formly"]=e["ngx-formly"]||{},e["ngx-formly"].material=e["ngx-formly"].material||{},e["ngx-formly"].material.select={}),e.ng.common,e.ng.forms,e.core,e.select,e.ng.material.select,e.ng.core,e["ngx-formly"].material["form-field"],e.ng.material.core)}(this,function(e,t,o,n,l,r,a,i,c){"use strict";var m=function(e,t){return(m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])})(e,t)};var s=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.defaultOptions={templateOptions:{options:[]}},e}return function n(e,t){function o(){this.constructor=e}m(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.formControl.value||[]},enumerable:!0,configurable:!0}),e.prototype.getState=function(e){return 0<this.value.length?this.value.length!==e.length?"indeterminate":"checked":""},e.prototype.toggleSelectAll=function(e){this.formControl.setValue(this.value.length!==e.length?e.map(function(e){return e.value}):[])},e.prototype.change=function(e){this.to.change&&this.to.change(this.field,e)},e.prototype.compareWith=function(e,t){return e===t},e.decorators=[{type:a.Component,args:[{selector:"formly-field-mat-select",template:'\n    <ng-template #selectAll let-selectOptions="selectOptions">\n      <mat-option (click)="toggleSelectAll(selectOptions)">\n        <mat-pseudo-checkbox class="mat-option-pseudo-checkbox"\n          [state]="getState(selectOptions)">\n        </mat-pseudo-checkbox>\n        {{ to.selectAllOption }}\n      </mat-option>\n    </ng-template>\n\n\n    <mat-select [id]="id"\n      [formControl]="formControl"\n      [formlyAttributes]="field"\n      [placeholder]="to.placeholder"\n      [tabindex]="to.tabindex || 0"\n      [compareWith]="to.compareWith || compareWith"\n      [multiple]="to.multiple"\n      (selectionChange)="change($event)"\n      [errorStateMatcher]="errorStateMatcher"\n      [aria-labelledby]="formField?._labelId"\n      [disableOptionCentering]="to.disableOptionCentering"\n      >\n      <ng-container *ngIf="to.options | formlySelectOptions:field | async as selectOptions">\n        <ng-container *ngIf="to.multiple && to.selectAllOption" [ngTemplateOutlet]="selectAll" [ngTemplateOutletContext]="{ selectOptions: selectOptions }">\n        </ng-container>\n        <ng-container *ngFor="let item of selectOptions">\n          <mat-optgroup *ngIf="item.group" [label]="item.label">\n            <mat-option *ngFor="let child of item.group" [value]="child.value" [disabled]="child.disabled">\n              {{ child.label }}\n            </mat-option>\n          </mat-optgroup>\n          <mat-option *ngIf="!item.group" [value]="item.value" [disabled]="item.disabled">{{ item.label }}</mat-option>\n        </ng-container>\n      </ng-container>\n    </mat-select>\n  '}]}],e}(i.FieldType),u=function(){function e(){}return e.decorators=[{type:a.NgModule,args:[{declarations:[s],imports:[t.CommonModule,o.ReactiveFormsModule,r.MatSelectModule,c.MatPseudoCheckboxModule,i.FormlyMatFormFieldModule,l.FormlySelectModule,n.FormlyModule.forChild({types:[{name:"select",component:s,wrappers:["form-field"]}]})]}]}],e}();e.FormlyMatSelectModule=u,e.FormlyFieldSelect=s,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-formly-material-select.umd.min.js.map